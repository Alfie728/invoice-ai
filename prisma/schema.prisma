// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String       @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?
    syncStatus               SyncStatus[]

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model SyncStatus {
    accountId       String    @id
    account         Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
    // Sync Information
    lastSyncedAt    DateTime?
    lastHistoryId   String?
    // Watch Information
    watchExpiration DateTime?
}

model RepliedThread {
    id           String   @id @default(cuid())
    threadId     String   @unique
    emailAddress String // The email address that received the message
    repliedAt    DateTime @default(now())
    messageId    String? // Optional: store the ID of the message you replied to
    subject      String? // Optional: store the subject for debugging/auditing

    @@index([emailAddress]) // For faster lookups by email
    @@index([repliedAt]) // For potential cleanup of old records
}

model InvoiceSender {
    id              String    @id @default(cuid())
    name            String
    emailAddress    String    @unique
    invoices        Invoice[]
    createdAt       DateTime  @default(now())
    lastInvoiceSent DateTime?

    @@index([name]) // Add index for searching by sender name
}

model Invoice {
    id              String            @id @default(cuid())
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    // Status of the invoice 
    invoiceStatus   InvoiceStatus     @default(PENDING)
    // Invoice Information
    invoiceNumber   String
    invoiceDate     DateTime
    invoiceDueDate  DateTime? // Made optional as not all invoices have due dates
    vendorName      String
    taxAmount       Float? // Made optional as not all invoices have tax
    subTotalAmount  Float
    // Coding Information
    vendorCode      String? // Made optional as might not be available for all vendors
    propertyCode    String? // Made optional as might not apply to all invoices
    invoiceAmount   Float // Consider removing if redundant with totalAmount
    invoiceCurrency InvoiceCurrency   @default(USD) // Added default value
    apAccount       String? // Made optional as might not be available initially
    cashAccount     String? // Made optional as might not be available initially
    expenseType     String? // Made optional as might not be available initially
    // Line Items
    invoiceLineItem InvoiceLineItem[]
    // Relations
    invoiceSender   InvoiceSender?    @relation(fields: [invoiceSenderId], references: [id])
    invoiceSenderId String? // Foreign key to InvoiceSender

    @@index([invoiceStatus]) // Index status for filtering
    @@index([invoiceDate]) // Index date for sorting and filtering
    @@index([vendorName]) // Index vendor name for searching
}

model InvoiceLineItem {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    // Line Item Information
    description String
    quantity    Float
    unitPrice   Float
    glCode      String? // Made optional as might not be available for all items
    // Relations
    invoiceId   String
    invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade) // Added cascade delete

    @@index([invoiceId]) // Index for faster joins
}

enum InvoiceStatus {
    PENDING
    APPROVED // Renamed from ACCEPTED for clarity
    REJECTED
}

enum InvoiceCurrency {
    USD
    CAD
    EUR
    GBP
    AUD
    NZD
    CHF
    JPY
    CNY
    INR
    MXN
    BRL
    ARS
    COP
    PHP
    IDR
    ZAR
    RUB
    KRW
    HKD
    SGD
    MYR
    BDT
    PKR
    SAR
}
